WITH sales AS
  (SELECT
    id_order,
    customer,
    date
  FROM sales),

new_customers AS
  (SELECT 
    *,
    DENSE_RANK() OVER (PARTITION BY customer ORDER BY date, id_order) AS customer_order_ranking,
    DENSE_RANK() OVER (PARTITION BY customer ORDER BY date DESC, id_order DESC) AS customer_order_ranking_inverse    
  FROM sales),

customer_status AS
  (SELECT
    DISTINCT a.*,
    b.date AS last_purchase_date,
    c.date AS next_purchase_date,
    DATEDIFF(a.date, b.date) AS days_since_last_purchase,
    DATEDIFF(
      CASE 
        WHEN a.customer_order_ranking_inverse = 1 THEN CURRENT_DATE
        ELSE c.date 
      END, a.date) AS days_until_next_purchase,
    CASE
      WHEN a.customer_order_ranking_inverse = 1
        AND DATEDIFF(CURRENT_DATE, a.date) > 180 THEN 'Inactive' ELSE 'Active'
          END AS current_active_status
    FROM new_customers AS a
    LEFT JOIN new_customers AS b 
      ON a.customer = b.customer
        AND a.customer_order_ranking = b.customer_order_ranking +1
    LEFT JOIN new_customers AS c 
      ON a.customer = c.customer
        AND a.customer_order_ranking = c.customer_order_ranking - 1)

SELECT
  id_order,
  customer,
  date,
  customer_order_ranking,
  customer_order_ranking_inverse,
  last_purchase_date,
  next_purchase_date,
  days_since_last_purchase,
  days_until_next_purchase,
  CASE
    WHEN customer_order_ranking = 1 THEN 'first customer order'
    WHEN customer_order_ranking_inverse = 1 THEN 'last customer order'
    ELSE 'customer_order'
  END AS customer_order_type,
  FIRST_VALUE(current_active_status) OVER (PARTITION BY customer ORDER BY date DESC) AS current_active_status,
  CASE
    WHEN days_until_next_purchase > 180 THEN 'Inactive'
    ELSE 'Active'
  END AS transaction_next_active_status,
  CASE
    WHEN customer_order_ranking = 1 THEN null
    WHEN days_since_last_purchase > 180 THEN 'Inactive'
    ELSE 'Active'
  END AS transaction_prior_active_status
FROM customer_status
ORDER BY date, id_order;
    
  
